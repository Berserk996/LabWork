// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DemoWebShop.FeatureFiles
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("RegistrationFeatureFile")]
    public partial class RegistrationFeatureFileFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "RegistrationFeatureFile.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FeatureFiles", "RegistrationFeatureFile", "\tCoverage of registraton by autotest.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("It is posible to register new user")]
        [NUnit.Framework.CategoryAttribute("reg")]
        public void ItIsPosibleToRegisterNewUser()
        {
            string[] tagsOfScenario = new string[] {
                    "reg"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It is posible to register new user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("\'Register\' page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "First name",
                            "Last name",
                            "Email",
                            "Password",
                            "Confirm pasword"});
                table10.AddRow(new string[] {
                            "unique name",
                            "unique lastName",
                            "unique email",
                            "unique password",
                            "unique password"});
#line 7
 testRunner.When("I enter the folowing details to register", ((string)(null)), table10, "When ");
#line hidden
#line 10
 testRunner.Then("\'Your registration completed\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("It is imposible to register with already existing email in system")]
        [NUnit.Framework.CategoryAttribute("registration")]
        public void ItIsImposibleToRegisterWithAlreadyExistingEmailInSystem()
        {
            string[] tagsOfScenario = new string[] {
                    "registration"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It is imposible to register with already existing email in system", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
 testRunner.Given("\'Register\' page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "First name",
                            "Last name",
                            "Email",
                            "Password",
                            "Confirm pasword"});
                table11.AddRow(new string[] {
                            "Vasya",
                            "Pupkin",
                            "vasya_pupkin@1221mail.ru",
                            "vasya1221",
                            "vasya1221"});
#line 15
 testRunner.When("I enter the folowing details to register", ((string)(null)), table11, "When ");
#line hidden
#line 18
 testRunner.Then("Error message with \'The specified email already exists\' text throws", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("It is impossibe to register with invalid data")]
        [NUnit.Framework.CategoryAttribute("p1")]
        [NUnit.Framework.TestCaseAttribute("First name is required.", "", "Pupkin", "vasya_pupkin@1221mail.ru", "vasya1221", "vasya1221", null)]
        [NUnit.Framework.TestCaseAttribute("Last name is required.", "Vasya", "", "vasya_pupkin@1221mail.ru", "vasya1221", "vasya1221", null)]
        [NUnit.Framework.TestCaseAttribute("Email is required.", "Vasya", "Pupkin", "", "vasya1221", "vasya1221", null)]
        [NUnit.Framework.TestCaseAttribute("Password is required.", "Vasya", "Pupkin", "vasya_pupkin@1221mail.ru", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("The password and confirmation password do not match.", "Vasya", "Pupkin", "vasya_pupkin@1221mail.ru", "vasya1221", "vasadaf", null)]
        [NUnit.Framework.TestCaseAttribute("Wrong email", "Vasya", "Pupkin", "vasya_pupkin", "vasya1221", "vasya1221", null)]
        [NUnit.Framework.TestCaseAttribute("The password should have at least 6 characters.", "Vasya", "Pupkin", "vasya_pupkin@1221mail.ru", "vasya", "vasya1221", null)]
        public void ItIsImpossibeToRegisterWithInvalidData(string errorText, string firstName, string lastName, string email, string password, string confirmPasword, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "p1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("errorText", errorText);
            argumentsOfScenario.Add("First name", firstName);
            argumentsOfScenario.Add("Last name", lastName);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("Password", password);
            argumentsOfScenario.Add("Confirm pasword", confirmPasword);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It is impossibe to register with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given("\'Register\' page is open", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "First name",
                            "Last name",
                            "Email",
                            "Password",
                            "Confirm pasword"});
                table12.AddRow(new string[] {
                            string.Format("{0}", firstName),
                            string.Format("{0}", lastName),
                            string.Format("{0}", email),
                            string.Format("{0}", password),
                            string.Format("{0}", confirmPasword)});
#line 23
 testRunner.When("I enter the folowing details to register", ((string)(null)), table12, "When ");
#line hidden
#line 26
 testRunner.Then(string.Format("Error message with \'{0}\' text is displaed", errorText), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
